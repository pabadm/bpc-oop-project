#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BandDatabaser.Database
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="BandDatabase")]
	public partial class DatabaseClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertSong(Song instance);
    partial void UpdateSong(Song instance);
    partial void DeleteSong(Song instance);
    partial void InsertAlbum(Album instance);
    partial void UpdateAlbum(Album instance);
    partial void DeleteAlbum(Album instance);
    partial void InsertBand(Band instance);
    partial void UpdateBand(Band instance);
    partial void DeleteBand(Band instance);
    partial void InsertBandAlbumSong(BandAlbumSong instance);
    partial void UpdateBandAlbumSong(BandAlbumSong instance);
    partial void DeleteBandAlbumSong(BandAlbumSong instance);
    #endregion
		
		public DatabaseClassesDataContext() : 
				base(global::BandDatabaser.Properties.Settings.Default.BandDatabaseConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Song> Songs
		{
			get
			{
				return this.GetTable<Song>();
			}
		}
		
		public System.Data.Linq.Table<Album> Albums
		{
			get
			{
				return this.GetTable<Album>();
			}
		}
		
		public System.Data.Linq.Table<Band> Bands
		{
			get
			{
				return this.GetTable<Band>();
			}
		}
		
		public System.Data.Linq.Table<BandAlbumSong> BandAlbumSongs
		{
			get
			{
				return this.GetTable<BandAlbumSong>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Song")]
	public partial class Song : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _IdSong;
		
		private string _SongName;
		
		private EntitySet<BandAlbumSong> _BandAlbumSongs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdSongChanging(System.Guid value);
    partial void OnIdSongChanged();
    partial void OnSongNameChanging(string value);
    partial void OnSongNameChanged();
    #endregion
		
		public Song()
		{
			this._BandAlbumSongs = new EntitySet<BandAlbumSong>(new Action<BandAlbumSong>(this.attach_BandAlbumSongs), new Action<BandAlbumSong>(this.detach_BandAlbumSongs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdSong", AutoSync=AutoSync.OnInsert, DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid IdSong
		{
			get
			{
				return this._IdSong;
			}
			set
			{
				if ((this._IdSong != value))
				{
					this.OnIdSongChanging(value);
					this.SendPropertyChanging();
					this._IdSong = value;
					this.SendPropertyChanged("IdSong");
					this.OnIdSongChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SongName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string SongName
		{
			get
			{
				return this._SongName;
			}
			set
			{
				if ((this._SongName != value))
				{
					this.OnSongNameChanging(value);
					this.SendPropertyChanging();
					this._SongName = value;
					this.SendPropertyChanged("SongName");
					this.OnSongNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Song_BandAlbumSong", Storage="_BandAlbumSongs", ThisKey="IdSong", OtherKey="IdSong")]
		public EntitySet<BandAlbumSong> BandAlbumSongs
		{
			get
			{
				return this._BandAlbumSongs;
			}
			set
			{
				this._BandAlbumSongs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BandAlbumSongs(BandAlbumSong entity)
		{
			this.SendPropertyChanging();
			entity.Song = this;
		}
		
		private void detach_BandAlbumSongs(BandAlbumSong entity)
		{
			this.SendPropertyChanging();
			entity.Song = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Album")]
	public partial class Album : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _IdAlbum;
		
		private string _AlbumName;
		
		private System.Nullable<System.DateTime> _ProductionYear;
		
		private System.Nullable<int> _IdPic;
		
		private EntitySet<BandAlbumSong> _BandAlbumSongs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdAlbumChanging(System.Guid value);
    partial void OnIdAlbumChanged();
    partial void OnAlbumNameChanging(string value);
    partial void OnAlbumNameChanged();
    partial void OnProductionYearChanging(System.Nullable<System.DateTime> value);
    partial void OnProductionYearChanged();
    partial void OnIdPicChanging(System.Nullable<int> value);
    partial void OnIdPicChanged();
    #endregion
		
		public Album()
		{
			this._BandAlbumSongs = new EntitySet<BandAlbumSong>(new Action<BandAlbumSong>(this.attach_BandAlbumSongs), new Action<BandAlbumSong>(this.detach_BandAlbumSongs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdAlbum", AutoSync=AutoSync.OnInsert, DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid IdAlbum
		{
			get
			{
				return this._IdAlbum;
			}
			set
			{
				if ((this._IdAlbum != value))
				{
					this.OnIdAlbumChanging(value);
					this.SendPropertyChanging();
					this._IdAlbum = value;
					this.SendPropertyChanged("IdAlbum");
					this.OnIdAlbumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AlbumName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string AlbumName
		{
			get
			{
				return this._AlbumName;
			}
			set
			{
				if ((this._AlbumName != value))
				{
					this.OnAlbumNameChanging(value);
					this.SendPropertyChanging();
					this._AlbumName = value;
					this.SendPropertyChanged("AlbumName");
					this.OnAlbumNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductionYear", DbType="Date")]
		public System.Nullable<System.DateTime> ProductionYear
		{
			get
			{
				return this._ProductionYear;
			}
			set
			{
				if ((this._ProductionYear != value))
				{
					this.OnProductionYearChanging(value);
					this.SendPropertyChanging();
					this._ProductionYear = value;
					this.SendPropertyChanged("ProductionYear");
					this.OnProductionYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdPic", DbType="Int")]
		public System.Nullable<int> IdPic
		{
			get
			{
				return this._IdPic;
			}
			set
			{
				if ((this._IdPic != value))
				{
					this.OnIdPicChanging(value);
					this.SendPropertyChanging();
					this._IdPic = value;
					this.SendPropertyChanged("IdPic");
					this.OnIdPicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Album_BandAlbumSong", Storage="_BandAlbumSongs", ThisKey="IdAlbum", OtherKey="IdAlbum")]
		public EntitySet<BandAlbumSong> BandAlbumSongs
		{
			get
			{
				return this._BandAlbumSongs;
			}
			set
			{
				this._BandAlbumSongs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BandAlbumSongs(BandAlbumSong entity)
		{
			this.SendPropertyChanging();
			entity.Album = this;
		}
		
		private void detach_BandAlbumSongs(BandAlbumSong entity)
		{
			this.SendPropertyChanging();
			entity.Album = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Band")]
	public partial class Band : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _IdBand;
		
		private string _BandName;
		
		private System.Nullable<System.DateTime> _FoundationYear;
		
		private System.Nullable<int> _IdPic;
		
		private EntitySet<BandAlbumSong> _BandAlbumSongs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdBandChanging(System.Guid value);
    partial void OnIdBandChanged();
    partial void OnBandNameChanging(string value);
    partial void OnBandNameChanged();
    partial void OnFoundationYearChanging(System.Nullable<System.DateTime> value);
    partial void OnFoundationYearChanged();
    partial void OnIdPicChanging(System.Nullable<int> value);
    partial void OnIdPicChanged();
    #endregion
		
		public Band()
		{
			this._BandAlbumSongs = new EntitySet<BandAlbumSong>(new Action<BandAlbumSong>(this.attach_BandAlbumSongs), new Action<BandAlbumSong>(this.detach_BandAlbumSongs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdBand", AutoSync=AutoSync.OnInsert, DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid IdBand
		{
			get
			{
				return this._IdBand;
			}
			set
			{
				if ((this._IdBand != value))
				{
					this.OnIdBandChanging(value);
					this.SendPropertyChanging();
					this._IdBand = value;
					this.SendPropertyChanged("IdBand");
					this.OnIdBandChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BandName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string BandName
		{
			get
			{
				return this._BandName;
			}
			set
			{
				if ((this._BandName != value))
				{
					this.OnBandNameChanging(value);
					this.SendPropertyChanging();
					this._BandName = value;
					this.SendPropertyChanged("BandName");
					this.OnBandNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FoundationYear", DbType="Date")]
		public System.Nullable<System.DateTime> FoundationYear
		{
			get
			{
				return this._FoundationYear;
			}
			set
			{
				if ((this._FoundationYear != value))
				{
					this.OnFoundationYearChanging(value);
					this.SendPropertyChanging();
					this._FoundationYear = value;
					this.SendPropertyChanged("FoundationYear");
					this.OnFoundationYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdPic", DbType="Int")]
		public System.Nullable<int> IdPic
		{
			get
			{
				return this._IdPic;
			}
			set
			{
				if ((this._IdPic != value))
				{
					this.OnIdPicChanging(value);
					this.SendPropertyChanging();
					this._IdPic = value;
					this.SendPropertyChanged("IdPic");
					this.OnIdPicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Band_BandAlbumSong", Storage="_BandAlbumSongs", ThisKey="IdBand", OtherKey="IdBand")]
		public EntitySet<BandAlbumSong> BandAlbumSongs
		{
			get
			{
				return this._BandAlbumSongs;
			}
			set
			{
				this._BandAlbumSongs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BandAlbumSongs(BandAlbumSong entity)
		{
			this.SendPropertyChanging();
			entity.Band = this;
		}
		
		private void detach_BandAlbumSongs(BandAlbumSong entity)
		{
			this.SendPropertyChanging();
			entity.Band = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BandAlbumSong")]
	public partial class BandAlbumSong : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _IdBand;
		
		private System.Nullable<System.Guid> _IdAlbum;
		
		private System.Guid _IdSong;
		
		private EntityRef<Album> _Album;
		
		private EntityRef<Band> _Band;
		
		private EntityRef<Song> _Song;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdBandChanging(System.Guid value);
    partial void OnIdBandChanged();
    partial void OnIdAlbumChanging(System.Nullable<System.Guid> value);
    partial void OnIdAlbumChanged();
    partial void OnIdSongChanging(System.Guid value);
    partial void OnIdSongChanged();
    #endregion
		
		public BandAlbumSong()
		{
			this._Album = default(EntityRef<Album>);
			this._Band = default(EntityRef<Band>);
			this._Song = default(EntityRef<Song>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdBand", AutoSync=AutoSync.OnInsert, DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid IdBand
		{
			get
			{
				return this._IdBand;
			}
			set
			{
				if ((this._IdBand != value))
				{
					if (this._Band.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdBandChanging(value);
					this.SendPropertyChanging();
					this._IdBand = value;
					this.SendPropertyChanged("IdBand");
					this.OnIdBandChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdAlbum", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> IdAlbum
		{
			get
			{
				return this._IdAlbum;
			}
			set
			{
				if ((this._IdAlbum != value))
				{
					if (this._Album.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdAlbumChanging(value);
					this.SendPropertyChanging();
					this._IdAlbum = value;
					this.SendPropertyChanged("IdAlbum");
					this.OnIdAlbumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdSong", AutoSync=AutoSync.OnInsert, DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid IdSong
		{
			get
			{
				return this._IdSong;
			}
			set
			{
				if ((this._IdSong != value))
				{
					if (this._Song.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdSongChanging(value);
					this.SendPropertyChanging();
					this._IdSong = value;
					this.SendPropertyChanged("IdSong");
					this.OnIdSongChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Album_BandAlbumSong", Storage="_Album", ThisKey="IdAlbum", OtherKey="IdAlbum", IsForeignKey=true, DeleteRule="CASCADE")]
		public Album Album
		{
			get
			{
				return this._Album.Entity;
			}
			set
			{
				Album previousValue = this._Album.Entity;
				if (((previousValue != value) 
							|| (this._Album.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Album.Entity = null;
						previousValue.BandAlbumSongs.Remove(this);
					}
					this._Album.Entity = value;
					if ((value != null))
					{
						value.BandAlbumSongs.Add(this);
						this._IdAlbum = value.IdAlbum;
					}
					else
					{
						this._IdAlbum = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Album");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Band_BandAlbumSong", Storage="_Band", ThisKey="IdBand", OtherKey="IdBand", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Band Band
		{
			get
			{
				return this._Band.Entity;
			}
			set
			{
				Band previousValue = this._Band.Entity;
				if (((previousValue != value) 
							|| (this._Band.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Band.Entity = null;
						previousValue.BandAlbumSongs.Remove(this);
					}
					this._Band.Entity = value;
					if ((value != null))
					{
						value.BandAlbumSongs.Add(this);
						this._IdBand = value.IdBand;
					}
					else
					{
						this._IdBand = default(System.Guid);
					}
					this.SendPropertyChanged("Band");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Song_BandAlbumSong", Storage="_Song", ThisKey="IdSong", OtherKey="IdSong", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Song Song
		{
			get
			{
				return this._Song.Entity;
			}
			set
			{
				Song previousValue = this._Song.Entity;
				if (((previousValue != value) 
							|| (this._Song.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Song.Entity = null;
						previousValue.BandAlbumSongs.Remove(this);
					}
					this._Song.Entity = value;
					if ((value != null))
					{
						value.BandAlbumSongs.Add(this);
						this._IdSong = value.IdSong;
					}
					else
					{
						this._IdSong = default(System.Guid);
					}
					this.SendPropertyChanged("Song");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
